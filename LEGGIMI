NOTion link:
https://www.fanculo-notion-non-funziona-diahane/minishell-a9fbbe1e7972431890222f7b0ce04eb6

◦ echo with option -n
◦ cd with only a relative or absolute path
◦ pwd with no options
◦ export with no options
◦ unset with no options
◦ env with no options or arguments
◦ exit with no options

ECHO NON DEVE STAMPARE LE VIRGOLETTE E GLI \

PARSING:
ls -l | grep "txt"
Anziche' usare la struttura ad albero i token potrebbero essere salvati in una lista o array
che li rappresenta linearmente. Il parser, invece di costruire nodi e rami come in un albero,
accumula informazioni in una struttura lineare, come un array di comandi o una tabella dei comandi.
Se il comando è ls -al | grep txt > out.txt, i token verranno riconosciuti come:
    ls      COMMAND
    -al     OPTION
    |       PIPELINE
    grep    COMMAND
    "txt"   ARGUMENT
    >       REDIRECT_OUT
    out.txt OUTFILE

Durante il parsing, si possono distinguere facilmente comandi e argomenti/opzioni perché
i comandi sono solitamente i primi token trovati, seguiti dagli argomenti.
Quando il lexer incontra un comando, crea una nuova entry nella tabella dei comandi
(o un array di strutture) per registrare il comando e le relative opzioni/argomenti.

Redirezioni (<, >, >>) e pipe (|) vengono trattati semplicemente come parte del flusso lineare.
Quando viene riconosciuto un token di redirezione (>, <, >>), il token successivo (file di input/output)
viene associato alla redirezione corrente e memorizzato nella struttura di comando.
Ad esempio, per il comando ls > out.txt, il parser riconosce il > e lo associa al file out.txt.
Per le pipe (|), il parser capisce che l'output del comando precedente deve essere collegato
all'input del comando successivo. La pipe potrebbe essere semplicemente un segno che indica che
la parte successiva del comando deve essere eseguita in un processo separato con l'output rediretto.

Il risultato finale del parsing senza un albero sarà una tabella o un array che contiene i comandi,
gli argomenti, le redirezioni e le pipe in una sequenza ordinata. Questa struttura sarà sufficiente per
eseguire i comandi direttamente, senza bisogno di navigare in una struttura ad albero.

Array di comandi:
struct Command {
    char* cmd;      // Il comando eseguibile, es: "ls"
    char** args;    // Lista degli argomenti/opzioni
    char* infile;   // Input redirezionato
    char* outfile;  // Output redirezionato
    bool append;    // Indica se usare ">>" per l'output
    bool background;// Indica se il comando deve essere eseguito in background
};
Command commands[MAX_COMMANDS]; // Array di comandi

Tabella di comandi:
Command[0]: 
    cmd = "ls", args = {"-al"}, infile = NULL, outfile = NULL, pipe = true
Command[1]:
    cmd = "grep", args = {"txt"}, infile = NULL, outfile = "out.txt", pipe = false


Una volta costruita la tabella (o array) dei comandi, il passo successivo è passare alla fase di esecuzione






